// !Generated by regml2cpp!
#ifndef __FLASH_INCLUDED
#define __FLASH_INCLUDED

#include <stmlib/bits.hpp>

namespace flash
{
    namespace fields
    {
        // Flash access control register [offset: 0x00, reset: 0x0000 0000]
        namespace acr
        {
            // Data cache reset (rm page 98)
            using dcrst = bit::field<12>;
            // Instruction cache reset (rm page 98)
            using icrst = bit::field<11>;
            // Data cache enable (rm page 98)
            using dcen = bit::field<10>;
            // Instruction cache enable (rm page 98)
            using icen = bit::field<9>;
            // Prefetch enable (rm page 98)
            using prften = bit::field<8>;
            // Latency (rm page 98)
            using latency = bit::field<2, 0>;
        } // namespace acr

        // Flash key register [offset: 0x04, reset: 0x0000 0000]
        namespace keyr
        {
            // FPEC key (rm page 100)
            using fkeyr = bit::field<31, 0>;
        } // namespace keyr

        // Flash option key register [offset: 0x08, reset: 0x0000 0000]
        namespace optkeyr
        {
            // Option byte key (rm page 100)
            using optkeyr = bit::field<31, 0>;
        } // namespace optkeyr

        // Flash status register [offset: 0x0C, reset: 0x0000 0000]
        namespace sr
        {
            // Busy (rm page 101)
            using bsy = bit::field<16>;
            // Programming sequence error (rm page 101)
            using pgserr = bit::field<7>;
            // Programming parallelism error (rm page 101)
            using pgperr = bit::field<6>;
            // Programming alignment error (rm page 101)
            using pgaerr = bit::field<5>;
            // Write protection error (rm page 101)
            using wrperr = bit::field<4>;
            // Operation error (rm page 101)
            using operr = bit::field<1>;
            // End of operation (rm page 101)
            using eop = bit::field<0>;
        } // namespace sr

        // Flash control register [offset: 0x10, reset: 0x8000 0000]
        namespace cr
        {
            // Lock (rm page 103)
            using lock = bit::field<31>;
            // Error interrupt enable (rm page 103)
            using errie = bit::field<25>;
            // End of operation interrupt enable (rm page 103)
            using eopie = bit::field<24>;
            // Start (rm page 103)
            using strt = bit::field<16>;
            // Program size (rm page 103)
            using psize = bit::field<9, 8>;
            // Sector number (rm page 104)
            using snb = bit::field<6, 3>;
            // Mass Erase (rm page 104)
            using mer = bit::field<2>;
            // Sector Erase (rm page 104)
            using ser = bit::field<1>;
            // Programming (rm page 104)
            using pg = bit::field<0>;
        } // namespace cr

        // Flash option control register [offset: 0x14, reset: 0x0FFF AAED]
        namespace optcr
        {
            // Not write protect (rm page 106)
            using nwrp = bit::field<27, 16>;
            // Read protect (rm page 106)
            using rdp = bit::field<15, 8>;
            // User option bytes (rm page 106)
            using user = bit::field<7, 5>;
            // BOR reset Level (rm page 106)
            using bor_lev = bit::field<3, 2>;
            // Option start (rm page 106)
            using optstrt = bit::field<1>;
            // Option lock (rm page 106)
            using optlock = bit::field<0>;
        } // namespace optcr
    }     // namespace fields

    struct register_map
    {
        // ACR: Flash access control register (rm page 97)
        bit::bitband_register<0x40023c00> acr;
        // KEYR: Flash key register (rm page 99)
        bit::bitband_register<0x40023c04> keyr;
        // OPTKEYR: Flash option key register (rm page 100)
        bit::bitband_register<0x40023c08> optkeyr;
        // SR: Flash status register (rm page 100)
        bit::bitband_register<0x40023c0c> sr;
        // CR: Flash control register (rm page 103)
        bit::bitband_register<0x40023c10> cr;
        // OPTCR: Flash option control register (rm page 105)
        bit::bitband_register<0x40023c14> optcr;
    };

    extern "C" register_map __flash__device_0x40023c00;
    static auto &device = __flash__device_0x40023c00;

} // namespace flash

#endif
